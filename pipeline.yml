# This pipeline publishes and keeps the dcind image up to date
resource_types:
- name: cogito
  type: registry-image
  check_every: 1h
  source:
    repository: pix4d/cogito

resources:
- name: github-status
  type: cogito
  icon: github
  check_every: 1h
  source:
    context_prefix: 'concourse'
    owner: emjot
    repo: dcind
    access_token: ((ci-gh-status-token))

- name: docker-release
  type: github-release
  icon: github
  check_every: 6h
  source:
    owner: moby
    repository: moby
    access_token: ((ci-gh-public-repo-read-token))

- name: docker-compose-release
  type: github-release
  icon: github
  check_every: 6h
  source:
    owner: docker
    repository: compose
    access_token: ((ci-gh-public-repo-read-token))

- name: repo
  type: git
  icon: git
  check_every: 30m
  source:
    uri: https://github.com/emjot/dcind
    ignore_paths: [pipeline.yml, pipeline-pr.yml, README.md]

- name: weekly-rebuild
  type: time
  icon: clock
  source:
    days:
      - Thursday
    start: 3:00 AM
    stop: 3:30 AM
    location: Europe/Berlin
    initial_version: true

- name: dcind
  icon: docker
  type: registry-image
  source:
    repository: emjotde/dcind
    tag: latest
    username: ((docker/username))
    password: ((docker/password))

jobs:
- name: build-and-publish
  plan:
  - in_parallel:
    - get: docker-release
      params:
        globs: [none]
    - get: docker-compose-release
      params:
        globs: [none]
    - get: repo
      trigger: true
    - get: weekly-rebuild
      trigger: true
  - in_parallel:
    - load_var: docker-version
      file: docker-release/version
    - load_var: docker-compose-version
      file: docker-compose-release/version
  - in_parallel:
    - put: github-status
      no_get: true
      inputs: [ repo ]
      params: { context: 'build', state: pending }
    - put: github-status
      no_get: true
      inputs: [ repo ]
      params: { context: 'test', state: pending }
    - put: github-status
      no_get: true
      inputs: [ repo ]
      params: { context: 'publish', state: pending }

  - task: build-image
    privileged: true
    params:
      BUILD_ARG_DOCKER_VERSION: ((.:docker-version))
      BUILD_ARG_DOCKER_COMPOSE_VERSION: ((.:docker-compose-version))
      UNPACK_ROOTFS: true
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: concourse/oci-build-task
      inputs:
      - name: repo
        path: .
      outputs:
      - name: image
      run:
        path: build
    on_success:
      put: github-status
      no_get: true
      inputs: [ repo ]
      params: { context: 'build', state: success }
    on_failure:
      put: github-status
      no_get: true
      inputs: [ repo ]
      params: { context: 'build', state: failure }
    on_error:
      put: github-status
      no_get: true
      inputs: [ repo ]
      params: { context: 'build', state: error }
    on_abort:
      put: github-status
      no_get: true
      inputs: [ repo ]
      params: { context: 'build', state: error }

  - task: test
    privileged: true
    image: image
    config:
      platform: linux
      run:
        path: bash
        args:
          - -exc
          - |
            source /docker-lib.sh
            start_docker

            docker images

            cat >docker-compose.test.yml <<EOL
            services:
              my-test-service:
                image: busybox
                command: sh -exc 'echo "Success"'
                volumes:
                  - foo:/foo
            volumes:
              foo:
            EOL

            docker compose -f docker-compose.test.yml --project-name dcind-test run --rm my-test-service
            docker compose -f docker-compose.test.yml --project-name dcind-test down

            # Cleanup.
            # Not sure if this is required.
            # It's quite possible that Concourse is smart enough to clean up the Docker mess itself.
            docker volume rm $(docker volume ls -q)
    on_success:
      put: github-status
      no_get: true
      inputs: [ repo ]
      params: { context: 'test', state: success }
    on_failure:
      put: github-status
      no_get: true
      inputs: [ repo ]
      params: { context: 'test', state: failure }
    on_error:
      put: github-status
      no_get: true
      inputs: [ repo ]
      params: { context: 'test', state: error }
    on_abort:
      put: github-status
      no_get: true
      inputs: [ repo ]
      params: { context: 'test', state: error }

  - task: tags
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: busybox
      params:
        DOCKER_VERSION: ((.:docker-version))
      outputs:
      - name: tags
      run:
        path: sh
        args:
          - -exc
          - |
            echo "${DOCKER_VERSION} ${DOCKER_VERSION}-$(date +%Y%m%d)" > tags/tags

  - put: dcind
    inputs: detect
    params:
      image: image/image.tar
      additional_tags: tags/tags
    on_success:
      put: github-status
      no_get: true
      inputs: [ repo ]
      params: { context: 'publish', state: success }
    on_failure:
      put: github-status
      no_get: true
      inputs: [ repo ]
      params: { context: 'publish', state: failure }
    on_error:
      put: github-status
      no_get: true
      inputs: [ repo ]
      params: { context: 'publish', state: error }
    on_abort:
      put: github-status
      no_get: true
      inputs: [ repo ]
      params: { context: 'publish', state: error }
